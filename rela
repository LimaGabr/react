import sqlite3
import time
from tkinter import StringVar, PhotoImage
import os
import ttkbootstrap
from ttkbootstrap.dialogs import Messagebox
import ttkbootstrap as ttk
from ttkbootstrap.tableview import *
from ttkbootstrap.tableview import Tableview
from dotenv import DotEnv
import mysql.connector
import pandas as pd
from pathlib import Path
from datetime import datetime
from ttkbootstrap.constants import *
from ttkbootstrap.tooltip import ToolTip
from pystray import MenuItem as item
import pystray
from PIL import Image
import datetime
import matplotlib.pyplot as plt
import plotly
import snap7
from threading import *
from pathlib import Path
import pdfkit
import webbrowser
from ttkbootstrap.constants import *
from ttkbootstrap.tooltip import ToolTip
import plotly.graph_objects as go
from plotly.subplots import make_subplots
dotenv = DotEnv()
class Application():

    def pegar_placa(self):
        self.banco = sqlite3.connect('leite.db')
        self.cursor = self.banco.cursor()
        self.query = (""" SELECT DISTINCT Placa from relatorio 
                                                                       """)

        self.res_placa = self.cursor.execute(self.query)
        self.r_placa = self.cursor.fetchall()

        for i in self.r_placa:
            teste = i[0]
            self.lista_placa.append(teste)

    def printCliente(self):

        webbrowser.open_new("Relatorio-Consumo.pdf")
    def imprimir(self):
        self.df_imprimir = pd.DataFrame(self.r3, columns=['Id','Placa','Litros', 'Hr_Inicio', 'Hr_Final', 'Data'])
        self.df_imprimir.to_html('index.html')

        pd.set_option('display.colheader_justify', 'center')
        html_string = '''
                               <html>
                                 <head><title>Relatório de Consumo</title></head>
                                 <link rel="stylesheet" type="text/css" href="df_style.css"/>
                                 <body>
                                   <div class="logo">
                                        <img id="all" src="cooper2.png" alt="logo">
                                   </div>
                                   {table}
                                   

                                 </body>
                               </html>.
                               '''

        # OUTPUT AN HTML FILE

        with open('index.html', 'w') as f:
            f.write(html_string.format(table=self.df_imprimir.to_html(classes='mystyle')))

        path_wkhtmltopdf = r'C:\Users\Jackson Carubin\PycharmProjects\pythonProject\venv\wkhtmltopdf\bin\wkhtmltopdf.exe'
        options = {
            'page-size': 'A4',
            'margin-top': '0.75in',
            'margin-right': '0.75in',
            'margin-bottom': '0.75in',
            'margin-left': '1.10in',
        }
        self.config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)
        pdfkit.from_file("index.html", "Relatorio-Consumo.pdf", configuration=self.config, options=options)

        self.printCliente()


    def grafico(self):

        self.df_grafico = pd.DataFrame(self.r3, columns=['Id','Placa','Litros', 'Hr_Inicio', 'Hr_Final', 'Data'])
        print(self.df_grafico)
        #pd.options.plotting.backend = 'plotly'
        #fig = make_subplots(rows=1, cols=1)
        #fig.add_trace(go.Bar(y=self.df_grafico['Litros'], name='Litros'), row=1, col=1)
        #fig.add_trace(go.Bar(x=self.df_grafico['Placa'], name='Velocidade'), row=1, col=1)
        #fig.update_xaxes(title_text="Quantidade de Litros", row=1, col=1)
        #fig.update_yaxes(title_text="Execução", row=1, col=1)
        #fig.update_layout(title_text="Gráficos de Temperatura x Velocidade")
        #fig.show()
        pd.options.plotting.backend = 'plotly'

        # self.grafico = self.df_mysql.plot(kind='hist', x='temp', color = 'dat')
        # self.grafico = self.df_mysql.plot(kind='hist', x='dat', y='temp', color='dat')
        # self.grafico.show()

        # graficox=self.resulGrafico['temp']
        # graficoy=self.resulGrafico['dia']

        # plt.hist(graficox)

        # plt.show()
        # pd.options.plotting.backend = 'plotly'

        self.grafico = self.df_grafico.plot(kind='bar', y='Litros', color='Placa', text_auto='.4s', title="Gráfico de Consumo")
        self.grafico.show()

    def frame_top(self):
        self.frame_btn = ttk.Frame(self.app)
        self.frame_btn.pack()
        self.frame_logo1 = ttk.Frame(self.app)
        self.frame_logo1.place(x=5, y=55)
        self.frame_logo2 = ttk.Frame(self.app)
        self.frame_logo2.place(x=1675, y=50)
        self.img_logo_cooper = PhotoImage(file="cooper222.png")
        self.img_logo_scs = PhotoImage(file="logo_33.png")
        self.img_grafico = PhotoImage(file="grafico.png")
        self.img_imprimir = PhotoImage(file="impressora2.png")
        self.img_pesquisar = PhotoImage(file="procurar.png")
        self.label_logo1 = ttk.Label(self.frame_logo1,image=self.img_logo_scs)
        self.label_logo1.pack(side="left")
        self.label_logo2 = ttk.Label(self.frame_logo2, image=self.img_logo_cooper)
        self.label_logo2.pack(side="right")
        self.label_data1 = ttk.DateEntry(self.frame_btn, bootstyle="secondary")
        self.label_data1.pack(pady=10)
        self.label_data2 = ttk.DateEntry(self.frame_btn, bootstyle="secondary")
        self.label_data2.pack()
        self.btn_pesquisar = ttk.Button(self.frame_btn, text="", command=self.pesquisa,
                                        image=self.img_pesquisar, bootstyle="light-link")
        self.label_combo = ttk.Label(self.frame_btn, text="Placa", font=("Arial", 8))
        self.label_combo.pack()
        self.combo_massada = ttk.Combobox(self.frame_btn, values=self.lista_placa, width=10)
        self.combo_massada.pack()
        self.combo_massada.current(0)
        self.btn_pesquisar.pack(side=RIGHT, pady=10, padx=10)
        self.btn_imprimir = ttk.Button(self.frame_btn, text="", image=self.img_imprimir, bootstyle="light-link", command=self.imprimir)
        self.btn_imprimir.pack(side=RIGHT, padx=10)
        self.btn_grafico = ttk.Button(self.frame_btn, text="", image=self.img_grafico, bootstyle="light-link", command=self.grafico)
        self.btn_grafico.pack(side=RIGHT, padx=10)
        ToolTip(self.label_data1, text="Selecione a data inicial", bootstyle=(SUCCESS, INVERSE))
        ToolTip(self.label_data2, text="Selecione a data final", bootstyle=(SUCCESS, INVERSE))
        ToolTip(self.btn_imprimir, text="Imprimir", bootstyle=(SUCCESS, INVERSE))
        ToolTip(self.btn_pesquisar, text="Pesquisar", bootstyle=(SUCCESS, INVERSE))
        ToolTip(self.btn_grafico, text="Gráfico", bootstyle=(SUCCESS, INVERSE))
    def frame2(self):

        self.frame = ttk.Frame(self.app)
        self.frame.pack(fill=BOTH, expand=YES, pady=20)


    def pesquisa(self):
        self.res_data1 = self.label_data1.entry.get()
        self.res_data2 = self.label_data2.entry.get()
        self.res_combo_placa = self.combo_massada.get()
        self.dia1 = self.res_data1[0:2]
        self.mes1 = self.res_data1[3:5]
        self.ano1 = self.res_data1[6:10]
        self.resultado = self.ano1 + "-" + self.mes1 + "-" + self.dia1
        print(self.resultado)

        self.dia2 = self.res_data2[0:2]
        self.mes2 = self.res_data2[3:5]
        self.ano2 = self.res_data2[6:10]
        self.resultado2 = self.ano2 + "-" + self.mes2 + "-" + self.dia2
        print(self.resultado2)
        if self.res_combo_placa == "Todas":
            self.query = (f""" SELECT Id, Placa, Litros, HrInicio, HrFinal, Data2 FROM relatorio
                                            WHERE Data BETWEEN '{self.resultado}' and '{self.resultado2}' ORDER BY Id ASC   """)
        else:
            self.query = (f""" SELECT Id, Placa, Litros, HrInicio, HrFinal, Data2 FROM relatorio
                                WHERE Data BETWEEN '{self.resultado}' and '{self.resultado2}' and Placa ='{self.res_combo_placa}' ORDER BY Id ASC   """)

        print(self.res_combo_placa)
        self.banco = sqlite3.connect('leite.db')
        self.cursor = self.banco.cursor()
        self.frame.destroy()
        self.frame2()

        self.cursor.execute(self.query)
        self.r3 = self.cursor.fetchall()
        print(self.r3)

        colors = self.app.style.colors

        coldata = [
            "Id",
            "placa",
            "Litros",
            "Inicio",
            "Fim",
            {"text": "Data", "stretch": True}

            # {"text": "Data", "stretch": True},

        ]

        self.rowdata3 = self.r3

        self.dt3 = Tableview(
            master=self.frame,
            coldata=coldata,
            rowdata=self.rowdata3,
            paginated=True,
            pagesize=1000,
            bootstyle=LIGHT,
            stripecolor=(colors.light, None),
            autofit=True


        )


        self.dt3.pack(fill=BOTH, expand=YES, padx=5, pady=0)



    def icones_init(self):
        self.frame_top()
        self.frame2()

        self.banco = sqlite3.connect('leite.db')
        self.cursor = self.banco.cursor()
        self.cursor.execute("""SELECT Id, Placa, Litros, HrInicio, HrFinal, Data2 FROM relatorio""")
        self.r2 = self.cursor.fetchall()
        print(self.r2)


        colors = self.app.style.colors

        coldata = [
            "Id",
            "placa",
            "Litros",
            "Inicio",
            "Fim",
            {"text": "Data", "stretch": True}

            # {"text": "Data", "stretch": True},

        ]

        self.rowdata2 = self.r2

        self.dt2 = Tableview(
            master=self.frame,
            coldata=coldata,
            rowdata=self.rowdata2,
            paginated=True,
            pagesize=1000,
            bootstyle=LIGHT,
            stripecolor=(colors.light, None),
            autofit=True

        )

        # self.dt.autofit_columns()
        self.dt2.pack(fill=BOTH, expand=YES, padx=5, pady=5)


    def form(self):

        self.labelUser = ttk.Label(self.app, text="Usuário", font=('Arial', 8), bootstyle="info")
        self.labelUser.pack()
        self.entr = ttk.Entry(self.app, bootstyle="light")
        self.entr.pack(pady=5)

        self.labelPassw = ttk.Label(self.app, text="Senha", font=('Arial', 8), bootstyle="info")
        self.labelPassw.pack()
        self.entryPassw = ttk.Entry(self.app, bootstyle="light", show="*")
        self.entryPassw.pack(pady=5)

        self.btnEnter = ttk.Button(self.app, text="Entrar", bootstyle="info", command=self.window2)
        self.btnEnter.pack(pady=20)




    def window2(self):

        if self.entr.get() == "supervisor" and self.entryPassw.get() == "4536":

            self.app.title("Controle de Consumo")

            self.destroy()
            self.center(self.app)


            self.icones_init()

        else:
            Messagebox.show_error("Usuário ou senha invalida!")


    def destroy(self):
        self.labelUser.destroy()
        self.entr.destroy()
        self.labelPassw.destroy()
        self.entryPassw.destroy()
        self.btnEnter.destroy()
        self.b.destroy()

    def imagem(self):
        self.img = PhotoImage(file="cooper2.png")
        self.b = ttk.Label(self.app, image=self.img)
        self.b.pack()

    def center(self, win):
        # :param win: the main window or Toplevel window to center

        # Apparently a common hack to get the window size. Temporarily hide the
        # window to avoid update_idletasks() drawing the window in the wrong
        # position.
        win.update_idletasks()  # Update "requested size" from geometry manager

        # define window dimensions width and height
        width = win.winfo_width()
        frm_width = win.winfo_rootx() - win.winfo_x()
        win_width = width + 2 * frm_width

        height = win.winfo_height()
        titlebar_height = win.winfo_rooty() - win.winfo_y()
        win_height = height + titlebar_height + frm_width

        # Get the window position from the top dynamically as well as position from left or right as follows
        x = win.winfo_screenwidth() // 2 - win_width // 2
        y = win.winfo_screenheight() // 2 - win_height // 2

        # this is the line that will center your window
        win.geometry('{}x{}+{}+{}'.format(width, height, x, y))

        # This seems to draw the window frame immediately, so only call deiconify()
        # after setting correct window position
        win.deiconify()
    def quit_window(self, icon, item):
        pass
        #self.app.destroy()

    def show_window(self, icon, item):
        self.icon.stop()
        self.app.after(0, self.app.deiconify)

    def withdraw_window(self):
        self.app.withdraw()
        self.image = Image.open("favicon.ico")
        self.menu = (item('Quit', self.quit_window), item('Show', self.show_window))
        self.icon = pystray.Icon("name", self.image, "Cooper_A1", self.menu)
        self.icon.run_detached()
    def banco(self):

        self.banco = mysql.connector.connect(
            host="127.0.0.1",
            user="root",
            passwd="",
            database='cooper'
        )
        self.query = ("""SELECT * FROM relatorio""")
        self.cursor = self.banco.cursor()
        self.cursor.execute(self.query)
        self.banco.close()

    def __init__(self):

        self.app = ttk.Window(themename="flatly")
        self.app.geometry(dotenv.get('Size_tela'))
        self.app.resizable(0, 0)

        self.app.title("Login")
        self.app.attributes("-fullscreen", dotenv.get('Fullscreen'))

        self.hora_inicio = []
        self.lista_placa = ["Todas"]
        self.pegar_placa()
        self.imagem()
        self.form()


        self.center(self.app)  # A função


        self.app.mainloop()


Application()
